<?xml version='1.0' encoding='utf-8'?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.11 -->
<!DOCTYPE rfc SYSTEM "rfc2629-xhtml.ent">
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-ietf-mmusic-sdp-uks-07" category="std" updates="8122" obsoletes="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 2.29.0 -->
  <front>
    <title abbrev="SDP UKS">Unknown Key Share Attacks on uses of TLS with the Session Description Protocol (SDP)</title>
    <seriesInfo name="Internet-Draft" value="draft-ietf-mmusic-sdp-uks-07"/>
    <author initials="M." surname="Thomson" fullname="Martin Thomson">
      <organization>Mozilla</organization>
      <address>
        <email>mt@lowentropy.net</email>
      </address>
    </author>
    <author initials="E." surname="Rescorla" fullname="Eric Rescorla">
      <organization>Mozilla</organization>
      <address>
        <email>ekr@rftm.com</email>
      </address>
    </author>
    <date year="2019" month="August" day="09"/>
    <abstract>
      <t>This document describes unknown key-share attacks on the use of Datagram
Transport Layer Security for the Secure Real-Time Transport Protocol
(DTLS-SRTP). Similar attacks are described on the use of DTLS-SRTP with the
identity bindings used in Web Real-Time Communications (WebRTC) and SIP
identity.  These attacks are difficult to mount, but they cause a victim to be
mislead about the identity of a communicating peer.  Mitigation techniques are
defined that implementations of RFC 8122 are encouraged to deploy.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" numbered="true" toc="default">
      <name>Introduction</name>
      <t>The use of Transport Layer Security (TLS) <xref target="TLS13" format="default"/> with the Session
Description Protocol (SDP) <xref target="SDP" format="default"/> is defined in
<xref target="FINGERPRINT" format="default"/>.  Further use with Datagram Transport Layer Security
(DTLS) <xref target="DTLS" format="default"/> and the Secure Real-time Transport Protocol (SRTP)
<xref target="SRTP" format="default"/> is defined as DTLS-SRTP <xref target="DTLS-SRTP" format="default"/>.</t>
      <t>In these specifications, key agreement is performed using TLS or DTLS, with
authentication being tied back to the session description (or SDP) through the
use of certificate fingerprints.  Communication peers check that a hash, or
fingerprint, provided in the SDP matches the certificate that is used in the TLS
or DTLS handshake.</t>
      <t>WebRTC identity (see Section 7 of <xref target="WEBRTC-SEC" format="default"/>)
and SIP identity <xref target="SIP-ID" format="default"/> both provide a mechanism that binds an
external identity to the certificate fingerprints from a session description.
However, this binding is not integrity-protected and therefore vulnerable to an
identity misbinding attack - or unknown key-share (UKS) attack - where the
attacker binds their identity to the fingerprint of another entity.  A
successful attack leads to the creation of sessions where peers are confused
about the identity of the participants.</t>
      <t>This document describes a TLS extension that can be used in combination with
these identity bindings to prevent this attack.</t>
      <t>A similar attack is possible with the use of certificate fingerprints alone.
Though attacks in this setting are likely infeasible in existing deployments due
to the narrow conditions necessary (see <xref target="limits" format="default"/>), this document also
describes mitigations for this attack.</t>
      <t>The mechanisms defined in this document are intended to strengthen the protocol
by preventing the use of unknown key shares in combination with other protocol
or implementation vulnerabilities.  RFC 8122 <xref target="FINGERPRINT" format="default"/> is updated by this
document to recommend the use of these mechanisms.</t>
      <t>This document assumes that signaling is integrity protected.  However, as
Section 7 of <xref target="FINGERPRINT" format="default"/> explains, many deployments that use SDP do not
guarantee integrity of session signaling and so are vulnerable to other attacks.
<xref target="FINGERPRINT" format="default"/> offers key continuity mechanisms as a potential means of
reducing exposure to attack in the absence of integrity protection.
<xref target="continuity" format="default"/> provides some analysis of the effect of key continuity in
relation to the described attacks.</t>
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD",
"SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in BCP 14 <xref target="RFC2119" format="default"/> <xref target="RFC8174" format="default"/>
when, and only when, they appear in all capitals, as shown here.</t>
    </section>
    <section anchor="uks" numbered="true" toc="default">
      <name>Unknown Key-Share Attack</name>
      <t>In an unknown key-share attack <xref target="UKS" format="default"/>, a malicious participant in a protocol
claims to control a key that is in reality controlled by some other actor.  This
arises when the identity associated with a key is not properly bound to the key.</t>
      <t>An endpoint that can acquire the certificate fingerprint of another entity can
advertise that fingerprint as their own in SDP.  An attacker can use a copy of
that fingerprint to cause a victim to communicate with another unaware victim,
even though it believes that it is communicating with the attacker.</t>
      <t>When the identity of communicating peers is established by higher-layer
signaling constructs, such as those in SIP identity <xref target="SIP-ID" format="default"/> or WebRTC
<xref target="WEBRTC-SEC" format="default"/>, this allows an attacker to bind their own identity to a session
with any other entity.</t>
      <t>The attacker obtains an identity assertion for an identity it controls, but
binds that to the fingerprint of one peer.  The attacker is then able to cause a
TLS connection to be established where two victim endpoints communicate.  The
victim that has its fingerprint copied by the attack correctly believes that it
is communicating with the other victim; however, the other victim incorrectly
believes that it is communicating with the attacker.</t>
      <t>An unknown key-share attack does not result in the attacker having access to any
confidential information exchanged between victims.  However, the failure in
mutual authentication can enable other attacks.  A victim might send information
to the wrong entity as a result.  Where information is interpreted in context,
misrepresenting that context could lead to the information being misinterpreted.</t>
      <t>A similar attack can be mounted based solely on the SDP <tt>fingerprint</tt> attribute
<xref target="FINGERPRINT" format="default"/> without compromising the integrity of the signaling channel.</t>
      <t>This attack is an aspect of SDP-based protocols that the technique known as
third-party call control (3PCC) <xref target="RFC3725" format="default"/> relies on.  3PCC exploits the
potential for the identity of a signaling peer to be different than the media
peer, allowing the media peer to be selected by the signaling peer.
<xref target="byebye-3pcc" format="default"/> describes the consequences of the mitigations described here for
systems that use 3PCC.</t>
      <section anchor="limits" numbered="true" toc="default">
        <name>Limits on Attack Feasibility</name>
        <t>The use of TLS with SDP depends on the integrity of session signaling.  Assuming
signaling integrity limits the capabilities of an attacker in several ways.  In
particular:</t>
        <ol spacing="normal" type="1">
          <li>An attacker can only modify the parts of the session signaling that they are
responsible for producing, namely their own offers and answers.</li>
          <li>No entity will successfully establish a session with a peer unless they are
willing to participate in a session with that peer.</li>
        </ol>
        <t>The combination of these two constraints make the spectrum of possible attacks
quite limited.  An attacker is only able to switch its own certificate
fingerprint for a valid certificate that is acceptable to its peer.  Attacks
therefore rely on joining two separate sessions into a single session. <xref target="fp" format="default"/>
describes an attack on SDP signaling under these constraints.</t>
        <t>Systems that rely on strong identity bindings, such as those defined in
<xref target="WEBRTC" format="default"/> or <xref target="SIP-ID" format="default"/>, have a different threat model, which admits the
possibility of attack by an entity with access to the signaling channel.
Attacks under these conditions are more feasible as an attacker is assumed to be
able to both observe and modify signaling messages.  <xref target="id" format="default"/> describes an attack
that assumes this threat model.</t>
      </section>
      <section anchor="continuity" numbered="true" toc="default">
        <name>Interactions with Key Continuity</name>
        <t>Systems that use key continuity (as defined in Section 15.1 of <xref target="ZRTP" format="default"/>
or as recommended in Section 7 of <xref target="FINGERPRINT" format="default"/>) might be able to detect an
unknown key-share attack if a session with either the attacker or the genuine
peer (i.e., the victim whose fingerprint was copied by an attacker) was
established in the past.  Whether this is possible depends on how key continuity
is implemented.</t>
        <t>Implementations that maintain a single database of identities with an index on
peer keys could discover that the identity saved for the peer key does not match
the claimed identity.  Such an implementation could notice the disparity between
the actual keys (those copied from a victim) and the expected keys (those of the
attacker).</t>
        <t>In comparison, implementations that first match based on peer identity could
treat an unknown key-share attack as though their peer had used a
newly-configured device.  The apparent addition of a new device could generate
user-visible notices (e.g., "Mallory appears to have a new device").  However,
such an event is not always considered alarming; some implementations might
silently save a new key.</t>
      </section>
      <section anchor="byebye-3pcc" numbered="true" toc="default">
        <name>Third-Party Call Control</name>
        <t>Third-party call control (3PCC) <xref target="RFC3725" format="default"/> is a technique where a signaling
peer establishes a call that is terminated by a different entity.  An unknown
key-share attack is very similar in effect to some 3PCC practices, so use of
3PCC could appear to be an attack.  However, 3PCC that follows RFC 3725 guidance
is unaffected, and peers that are aware of changes made by a 3PCC controller can
correctly distinguish actions of a 3PCC controller from attack.</t>
        <t>3PCC as described in RFC 3725 is incompatible with SIP identity <xref target="SIP-ID" format="default"/> as
SIP Identity relies on creating a binding between SIP requests and SDP.  The
controller is the only entity that generates SIP requests in RFC 3725.
Therefore, in a 3PCC context, only the use of the <tt>fingerprint</tt> attribute
without additional bindings or WebRTC identity <xref target="WEBRTC-SEC" format="default"/> is possible.</t>
        <t>The attack mitigation mechanisms described in this document will prevent the use
of 3PCC if peers have different views of the involved identities, or the value
of SDP <tt>tls-id</tt> attributes.</t>
        <t>For 3PCC to work with the proposed mechanisms, TLS peers need to be aware of the
signaling so that they can correctly generate and check the TLS extensions.  For
a connection to be successfully established, a 3PCC controller needs to either
forward SDP without modification, or to avoid modifications to <tt>fingerprint</tt>,
<tt>tls-id</tt>, and <tt>identity</tt> attributes.  A controller that follows the best
practices in RFC 3725 is expected to forward SDP without modification, thus
ensuring the integrity of these attributes.</t>
      </section>
    </section>
    <section anchor="id" numbered="true" toc="default">
      <name>Unknown Key-Share with Identity Bindings</name>
      <t>The identity assertions used for WebRTC (Section 7 of <xref target="WEBRTC-SEC" format="default"/>) and the
SIP PASSPoRT used in SIP identity (<xref target="SIP-ID" format="default"/>, <xref target="PASSPoRT" format="default"/>) are bound
to the certificate fingerprint of an endpoint.  An attacker can cause an identity
binding to be created that binds an identity they control to the fingerprint of
a first victim.</t>
      <t>An attacker can thereby cause a second victim to believe that they are
communicating with an attacker-controlled identity, when they are really talking
to the first victim.  The attacker does this by creating an identity assertion
that covers a certificate fingerprint of the first victim.</t>
      <t>A variation on the same technique can be used to cause both victims to both
believe they are talking to the attacker when they are talking to each other.
In this case, the attacker performs the identity misbinding once for each
victim.</t>
      <t>The problem might appear to be caused by the fact that the authority that
certifies the identity binding is not required to verify that the entity
requesting the binding controls the keys associated with the fingerprints.
SIP and WebRTC identity providers are not required to perform this
validation.  However, validation of keys by the identity provider is not
relevant because verifying control of the associated keys is not a necessary
condition for a secure protocol, nor would it be sufficient to prevent attack
<xref target="SIGMA" format="default"/>.</t>
      <t>A simple solution to this problem is suggested by <xref target="SIGMA" format="default"/>.  The identity of
endpoints is included under a message authentication code (MAC) during the
cryptographic handshake.  Endpoints then validate that their peer has provided
an identity that matches their expectations.  In TLS, the Finished message
provides a MAC over the entire handshake, so that including the identity in a
TLS extension is sufficient to implement this solution.</t>
      <t>Rather than include a complete identity binding - which could be
sizeable - a collision- and pre-image-resistant hash of the binding is included
in a TLS extension as described in <xref target="external_id_hash" format="default"/>.  Endpoints then need
only validate that the extension contains a hash of the identity binding they
received in signaling.  If the identity binding is successfully validated, the
identity of a peer is verified and bound to the session.</t>
      <t>This form of unknown key-share attack is possible without compromising signaling
integrity, unless the defenses described in <xref target="fp" format="default"/> are used.  In order to
prevent both forms of attack, endpoints MUST use the <tt>external_session_id</tt>
extension (see <xref target="external_session_id" format="default"/>) in addition to the <tt>external_id_hash</tt>
(<xref target="external_id_hash" format="default"/>) so that two calls between the same parties can't be
altered by an attacker.</t>
      <section anchor="id-example" numbered="true" toc="default">
        <name>Example</name>
        <t>In the example shown in <xref target="identity-attack" format="default"/>, it is assumed that the attacker
also controls the signaling channel.</t>
        <t>Mallory (the attacker) presents two victims, Norma and Patsy, with two separate
sessions.  In the first session, Norma is presented with the option to
communicate with Mallory; a second session with Norma is presented to Patsy.</t>
        <figure anchor="identity-attack">
          <name>Example Attack on Identity Bindings</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  Norma                   Mallory                   Patsy
  (fp=N)                   -----                    (fp=P)
    |                        |                        |
    |<---- Signaling1 ------>|                        |
    |   Norma=N Mallory=P    |                        |
    |                        |<---- Signaling2 ------>|
    |                        |   Norma=N Patsy=P      |
    |                                                 |
    |<=================DTLS (fp=N,P)=================>|
    |                                                 |
  (peer = Mallory!)                         (peer = Norma)
]]></artwork>
        </figure>
        <t>The attack requires that Mallory obtain an identity binding for her own identity
with the fingerprints presented by Patsy (P), which Mallory might have obtained
previously.  This false binding is then presented to Norma (Signaling1 in the
figure).</t>
        <t>Patsy could be similarly duped, but in this example, a correct binding between
Norma's identity and fingerprint (N) is faithfully presented by Mallory.  This
session (Signaling2 in the figure) can be entirely legitimate.</t>
        <t>A DTLS session is established directly between Norma and Patsy.  In order for
this to happen Mallory can substitute transport-level information in both
sessions to facilitate this, though this is not necessary if Mallory is on the
network path between Norma and Patsy.</t>
        <t>As a result, Patsy correctly believes that she is communicating with Norma.
However, Norma incorrectly believes she is talking to Mallory.  As stated in
<xref target="uks" format="default"/>, Mallory cannot access media, but Norma might send information to Patsy
that is Norma might not intend or that Patsy might misinterpret.</t>
      </section>
      <section anchor="external_id_hash" numbered="true" toc="default">
        <name>The external_id_hash TLS Extension</name>
        <t>The <tt>external_id_hash</tt> TLS extension carries a hash of the identity assertion
that the endpoint sending the extension has asserted to its peer.  Both peers
include a hash of their own identity assertion.</t>
        <t>The <tt>extension_data</tt> for the <tt>external_id_hash</tt> extension contains a
<tt>ExternalIdentityHash</tt> struct, described below using the syntax defined in
Section 3 of <xref target="TLS13" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   struct {
      opaque binding_hash<0..32>;
   } ExternalIdentityHash;
]]></artwork>
        <t>Where an identity assertion has been asserted by a peer, this extension includes
a SHA-256 hash of the assertion.  An empty value is used to indicate support for
the extension.</t>
        <dl newline="false" spacing="normal">
          <dt>Note:</dt>
          <dd>
  For both types of identity assertion, if SHA-256 should prove to be inadequate
at some point in the future (see <xref target="AGILITY" format="default"/>), a new TLS extension
can be defined that uses a different hash function.</dd>
        </dl>
        <t>Identity bindings might be provided by only one peer.  An endpoint that does not
produce an identity binding MUST generate an empty <tt>external_id_hash</tt> extension
in its ClientHello or - if a client provides the extension - in ServerHello or
EncryptedExtensions.  An empty extension has a zero-length binding_hash field.</t>
        <t>A peer that receives an <tt>external_id_hash</tt> extension that does not match the
value of the identity binding from its peer MUST immediately fail the TLS
handshake with a illegal_parameter alert.  The absence of an identity binding
does not relax this requirement; if a peer provided no identity binding, a
zero-length extension MUST be present to be considered valid.</t>
        <t>Implementations written prior to the definition of the extensions in this
document will not support this extension for some time.  A peer that receives an
identity binding but does not receive an <tt>external_id_hash</tt> extension MAY accept
a TLS connection rather than fail a connection where the extension is absent.</t>
        <t>Any validation performed of the <tt>external_id_hash</tt> extension is done in addition
to the validation required by <xref target="FINGERPRINT" format="default"/> and any identity assertion
definition.</t>
        <t>An <tt>external_id_hash</tt> extension that is any length other than 0 or 32 is invalid
and MUST cause the receiving endpoint to generate a fatal <tt>decode_error</tt> alert.</t>
        <t>In TLS 1.3, an <tt>external_id_hash</tt> extension sent by a server MUST be sent in the
EncryptedExtensions message.</t>
        <section anchor="calculating-externalidhash-for-webrtc-identity" numbered="true" toc="default">
          <name>Calculating external_id_hash for WebRTC Identity</name>
          <t>A WebRTC identity assertion (Section 7 of <xref target="WEBRTC-SEC" format="default"/>) is provided as a JSON
<xref target="JSON" format="default"/> object that is encoded into a JSON text.  The JSON text is
encoded using UTF-8 <xref target="UTF8" format="default"/> as described by Section 8.1 of <xref target="JSON" format="default"/>.
The content of the <tt>external_id_hash</tt> extension is produced by hashing the
resulting octets with SHA-256 <xref target="SHA" format="default"/>.  This produces the 32 octets of
the <tt>binding_hash</tt> parameter, which is the sole contents of the extension.</t>
          <t>The SDP <tt>identity</tt> attribute includes the base64 <xref target="BASE64" format="default"/> encoding of
the UTF-8 encoding of the same JSON text.  The <tt>external_id_hash</tt> extension is
validated by performing base64 decoding on the value of the SDP <tt>identity</tt>
attribute, hashing the resulting octets using SHA-256, and comparing the results
with the content of the extension.  In pseudocode form, using the
<tt>identity-assertion-value</tt> field from the <tt>identity</tt> attribute grammar as
defined in <xref target="WEBRTC-SEC" format="default"/>:</t>
          <t><tt>
external_id_hash = SHA-256(b64decode(identity-assertion-value))
</tt></t>
          <dl newline="false" spacing="normal">
            <dt>Note:</dt>
            <dd>
  The base64 of the SDP <tt>identity</tt> attribute is decoded to avoid capturing
variations in padding.  The base64-decoded identity assertion could include
leading or trailing whitespace octets.  WebRTC identity assertions are not
canonicalized; all octets are hashed.</dd>
          </dl>
        </section>
        <section anchor="calculating-externalidhash-for-passport" numbered="true" toc="default">
          <name>Calculating external_id_hash for PASSPoRT</name>
          <t>Where the compact form of PASSPoRT <xref target="PASSPoRT" format="default"/> is used, it MUST be expanded
into the full form.  The base64 encoding used in the SIP Identity (or 'y')
header field MUST be decoded then used as input to SHA-256.  This produces the
32 octet <tt>binding_hash</tt> value used for creating or validating the extension.  In
pseudocode, using the <tt>signed-identity-digest</tt> field from the <tt>Identity</tt> grammar
defined <xref target="SIP-ID" format="default"/>:</t>
          <t><tt>
external_id_hash = SHA-256(b64decode(signed-identity-digest))
</tt></t>
        </section>
      </section>
    </section>
    <section anchor="fp" numbered="true" toc="default">
      <name>Unknown Key-Share with Fingerprints</name>
      <t>An attack on DTLS-SRTP is possible because the identity of peers involved is not
established prior to establishing the call.  Endpoints use certificate
fingerprints as a proxy for authentication, but as long as fingerprints are used
in multiple calls, they are vulnerable to attack.</t>
      <t>Even if the integrity of session signaling can be relied upon, an attacker might
still be able to create a session where there is confusion about the
communicating endpoints by substituting the fingerprint of a communicating
endpoint.</t>
      <t>An endpoint that is configured to reuse a certificate can be attacked if it is
willing to initiate two calls at the same time, one of which is with an
attacker.  The attacker can arrange for the victim to incorrectly believe that
it is calling the attacker when it is in fact calling a second party.  The
second party correctly believes that it is talking to the victim.</t>
      <t>As with the attack on identity bindings, this can be used to cause two victims
to both believe they are talking to the attacker when they are talking to each
other.</t>
      <section anchor="fp-example" numbered="true" toc="default">
        <name>Example</name>
        <t>To mount this attack, two sessions need to be created with the same endpoint at
almost precisely the same time.  One of those sessions is initiated with the
attacker, the second session is created toward another honest endpoint.  The
attacker convinces the first endpoint that their session with the attacker has
been successfully established, but media is exchanged with the other honest
endpoint.  The attacker permits the session with the other honest endpoint to
complete only to the extent necessary to convince the other honest endpoint to
participate in the attacked session.</t>
        <t>In addition to the constraints described in <xref target="limits" format="default"/>, the attacker in this
example also needs the ability to view and drop packets between victims.
That is, the attacker is on-path for media.</t>
        <t>The attack shown in <xref target="implausible-attack" format="default"/> depends on a somewhat implausible set
of conditions.  It is intended to demonstrate what sort of attack is possible
and what conditions are necessary to exploit this weakness in the protocol.</t>
        <figure anchor="implausible-attack">
          <name>Example Attack Scenario using Fingerprints</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
  Norma                   Mallory                 Patsy
  (fp=N)                   -----                  (fp=P)
    |                        |                      |
    +---Signaling1 (fp=N)--->|                      |
    +-----Signaling2 (fp=N)------------------------>|
    |<-------------------------Signaling2 (fp=P)----+
    |<---Signaling1 (fp=P)---+                      |
    |                        |                      |
    |=======DTLS1=======>(Forward)======DTLS1======>|
    |<======DTLS2========(Forward)<=====DTLS2=======|
    |=======Media1======>(Forward)======Media1=====>|
    |<======Media2=======(Forward)<=====Media2======|
    |                       |                       |
    |=======DTLS2========>(Drop)                    |
    |                       |                       |
]]></artwork>
        </figure>
        <t>In this scenario, there are two sessions initiated at the same time by Norma.
Signaling is shown with single lines ('-'), DTLS and media with double lines
('=').</t>
        <t>The first session is established with Mallory, who falsely uses Patsy's
certificate fingerprint (denoted with 'fp=P').  A second session is initiated
between Norma and Patsy.  Signaling for both sessions is permitted to complete.</t>
        <t>Once signaling is complete on the first session, a DTLS connection is
established. Ostensibly, this connection is between Mallory and Norma but
Mallory forwards DTLS and media packets sent to her by Norma to Patsy.  These
packets are denoted 'DTLS1' because Norma associates these with the first
signaling session ('signaling1').</t>
        <t>Mallory also intercepts packets from Patsy and forwards those to Norma at the
transport address that Norma associates with Mallory.  These packets are denoted
'DTLS2' to indicate that Patsy associates these with the second signaling
session ('signaling2'), however Norma will interpret these as being associated
with the first signaling session ('signaling1').</t>
        <t>The second signaling exchange - 'signaling2', between Norma and Patsy - is
permitted to continue to the point where Patsy believes that it has succeeded.
This ensures that Patsy believes that she is communicating with Norma.  In the
end, Norma believes that she is communicating with Mallory, when she is really
communicating with Patsy.  Just like the example in <xref target="id-example" format="default"/>, Mallory
cannot access media, but Norma might send information to Patsy that is Norma
might not intend or that Patsy might misinterpret.</t>
        <t>Though Patsy needs to believe that the second signaling session has been
successfully established, Mallory has no real interest in seeing that session
also be established.  Mallory only needs to ensure that Patsy maintains the
active session and does not abandon the session prematurely.  For this reason,
it might be necessary to permit the signaling from Patsy to reach Norma to allow
Patsy to receive a call setup completion signal, such as a SIP ACK.  Once the
second session is established, Mallory might cause DTLS packets sent by Norma to
Patsy to be dropped.  However, if Mallory allows DTLS packets to pass, it is
likely that Patsy will discard them as Patsy will already have a successful DTLS
connection established.</t>
        <t>For the attacked session to be sustained beyond the point that Norma detects
errors in the second session, Mallory also needs to block any signaling that
Norma might send to Patsy asking for the call to be abandoned.  Otherwise, Patsy
might receive a notice that the call is failed and thereby abort the call.</t>
        <t>This attack creates an asymmetry in the beliefs about the identity of peers.
However, this attack is only possible if the victim (Norma) is willing to
conduct two sessions nearly simultaneously, if the attacker (Mallory) is on the
network path between the victims, and if the same certificate - and therefore
SDP <tt>fingerprint</tt> attribute value - is used by Norma for both sessions.</t>
        <t>Where ICE <xref target="ICE" format="default"/> is used, Mallory also needs to ensure that
connectivity checks between Patsy and Norma succeed, either by forwarding checks
or answering and generating the necessary messages.</t>
      </section>
      <section anchor="sess-id" numbered="true" toc="default">
        <name>Unique Session Identity Solution</name>
        <t>The solution to this problem is to assign a new identifier to communicating
peers.  Each endpoint assigns their peer a unique identifier during call
signaling.  The peer echoes that identifier in the TLS handshake, binding that
identity into the session.  Including this new identity in the TLS handshake
means that it will be covered by the TLS Finished message, which is necessary to
authenticate it (see <xref target="SIGMA" format="default"/>).</t>
        <t>Successful validation that the identifier matches the expected value means that
the connection corresponds to the signaled session and is therefore established
between the correct two endpoints.</t>
        <t>This solution relies on the unique identifier given to DTLS sessions using the
SDP <tt>tls-id</tt> attribute <xref target="DTLS-SDP" format="default"/>.  This field is
already required to be unique.  Thus, no two offers or answers from the same
client will have the same value.</t>
        <t>A new <tt>external_session_id</tt> extension is added to the TLS or DTLS handshake for
connections that are established as part of the same call or real-time session.
This carries the value of the <tt>tls-id</tt> attribute and provides integrity
protection for its exchange as part of the TLS or DTLS handshake.</t>
      </section>
      <section anchor="external_session_id" numbered="true" toc="default">
        <name>The external_session_id TLS Extension</name>
        <t>The <tt>external_session_id</tt> TLS extension carries the unique identifier that an
endpoint selects.  When used with SDP, the value MUST include the <tt>tls-id</tt>
attribute from the SDP that the endpoint generated when negotiating the session.
This document only defines use of this extension for SDP; other methods of
external session negotiation can use this extension to include a unique session
identifier.</t>
        <t>The <tt>extension_data</tt> for the <tt>external_session_id</tt> extension contains an
ExternalSessionId struct, described below using the syntax defined in
<xref target="TLS13" format="default"/>:</t>
        <artwork name="" type="" align="left" alt=""><![CDATA[
   struct {
      opaque session_id<20..255>;
   } ExternalSessionId;
]]></artwork>
        <t>For SDP, the <tt>session_id</tt> field of the extension includes the value of the
<tt>tls-id</tt> SDP attribute as defined in <xref target="DTLS-SDP" format="default"/>
(that is, the <tt>tls-id-value</tt> ABNF production).  The value of the <tt>tls-id</tt>
attribute is encoded using ASCII <xref target="ASCII" format="default"/>.</t>
        <t>Where RTP and RTCP <xref target="RTP" format="default"/> are not multiplexed, it is possible that the
two separate DTLS connections carrying RTP and RTCP can be switched.  This is
considered benign since these protocols are designed to be distinguishable as
SRTP <xref target="SRTP" format="default"/> provides key separation.  Using RTP/RTCP multiplexing
<xref target="RTCP-MUX" format="default"/> further avoids this problem.</t>
        <t>The <tt>external_session_id</tt> extension is included in a ClientHello and - if the
extension is present in the ClientHello - either ServerHello (for TLS and DTLS
versions less than 1.3) or EncryptedExtensions (for TLS 1.3).</t>
        <t>Endpoints MUST check that the <tt>session_id</tt> parameter in the extension that they
receive includes the <tt>tls-id</tt> attribute value that they received in their peer's
session description.  Endpoints can perform string comparison by ASCII decoding
the TLS extension value and comparing it to the SDP attribute value, or compare
the encoded TLS extension octets with the encoded SDP attribute value.  An
endpoint that receives a <tt>external_session_id</tt> extension that is not identical
to the value that it expects MUST abort the connection with a fatal
<tt>illegal_parameter</tt> alert.</t>
        <t>Any validation performed of the <tt>external_session_id</tt> extension is done in
addition to the validation required by <xref target="FINGERPRINT" format="default"/>.</t>
        <t>An endpoint that is communicating with a peer that does not support this
extension will receive a ClientHello, ServerHello or EncryptedExtensions that
does not include this extension.  An endpoint MAY choose to continue a session
without this extension in order to interoperate with peers that do not implement
this specification.</t>
        <t>In TLS 1.3, an <tt>external_session_id</tt> extension sent by a server MUST be sent in
the EncryptedExtensions message.</t>
        <t>This defense is not effective if an attacker can rewrite <tt>tls-id</tt> values in
signaling.  Only the mechanism in <tt>external_id_hash</tt> is able to defend against
an attacker that can compromise session integrity.</t>
      </section>
    </section>
    <section anchor="concat" numbered="true" toc="default">
      <name>Session Concatenation</name>
      <t>Use of session identifiers does not prevent an attacker from establishing two
concurrent sessions with different peers and forwarding signaling from those
peers to each other.  Concatenating two signaling sessions in this way creates
two signaling sessions, with two session identifiers, but only the TLS
connections from a single session are established as a result.  In doing so, the
attacker creates a situation where both peers believe that they are talking to
the attacker when they are talking to each other.</t>
      <t>In the absence of any higher-level concept of peer identity, the use of session
identifiers does not prevent session concatenation if the attacker is able to
copy the session identifier from one signaling session to another.  This kind of
attack is prevented by systems that enable peer authentication such as WebRTC
identity <xref target="WEBRTC-SEC" format="default"/> or SIP identity <xref target="SIP-ID" format="default"/>.  However, session
concatenation remains possible at higher layers: an attacker can establish two
independent sessions and simply forward any data it receives from one into the
other.</t>
      <t>Use of the <tt>external_session_id</tt> does not guarantee that the identity of the
peer at the TLS layer is the same as the identity of the signaling peer.  The
advantage an attacker gains by concatenating sessions is limited unless data is
exchanged on the assumption that signaling and TLS peers are the same.  If a
secondary protocol uses the signaling channel with the assumption that the
signaling and TLS peers are the same then that protocol is vulnerable to attack.
A signaling system that can defend against session concatenation, while out of
scope for this document, requires that the signaling layer is authenticated and
bound to any TLS connections.</t>
      <t>It is important to note that multiple connections can be created within the same
signaling session.  An attacker might concatenate only part of a session,
choosing to terminate some connections (and optionally forward data) while
arranging to have peers interact directly for other connections.  It is even
possible to have different peers interact for each connection.  This means that
the actual identity of the peer for one connection might differ from the peer on
another connection.</t>
      <t>Critically, information about the identity of TLS peers provides no assurances
about the identity of signaling peers and do not transfer between TLS
connections in the same session.  Information extracted from a TLS connection
therefore MUST NOT be used in a secondary protocol outside of that connection if
that protocol assumes that the signaling protocol has the same peers.
Similarly, security-sensitive information from one TLS connection MUST NOT be
used in other TLS connections even if they are established as a result of the
same signaling session.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security Considerations</name>
      <t>The mitigations in this document, when combined with identity assertions, ensure
that there is no opportunity to misrepresent the identity of TLS peers.  This
assurance is provided even if an attacker can modify signaling messages.</t>
      <t>Without identity assertions, the mitigations in this document prevent the
session splicing attack described in <xref target="fp" format="default"/>.  Defense against session
concatenation (<xref target="concat" format="default"/>) additionally requires protocol peers are not able to
claim the certificate fingerprints of other entities.</t>
    </section>
    <section anchor="iana-considerations" numbered="true" toc="default">
      <name>IANA Considerations</name>
      <t>This document registers two extensions in the TLS "ExtensionType Values"
registry established in <xref target="TLS13" format="default"/>:</t>
      <ul spacing="normal">
        <li>The <tt>external_id_hash</tt> extension defined in <xref target="external_id_hash" format="default"/> has been
assigned a code point of TBD; it is recommended and is marked as "CH, EE"
in TLS 1.3.</li>
        <li>The <tt>external_session_id</tt> extension defined in <xref target="external_session_id" format="default"/> has
been assigned a code point of TBD; it is recommended and is marked as
"CH, EE" in TLS 1.3.</li>
      </ul>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8446.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4566.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8122.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6347.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3711.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5763.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/publicrfc/bibxml3/reference.I-D.ietf-rtcweb-security-arch-20.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8224.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8174.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8225.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8259.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3629.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6234.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4648.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/publicrfc/bibxml3/reference.I-D.ietf-mmusic-dtls-sdp-32.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.20.xml"/></references>
      <references>
        <name>Informative References</name>
        <reference anchor="UKS">
          <front>
            <title>Unknown Key-Share Attacks on the Station-to-Station (STS) Protocol</title>
            <seriesInfo name="Lecture Notes in Computer Science 1560, Springer, pp. 154-170" value=""/>
            <author initials="S." surname="Blake-Wilson">
              <organization/>
            </author>
            <author initials="A." surname="Menezes">
              <organization/>
            </author>
            <date year="1999"/>
          </front>
        </reference>
        <reference anchor="SIGMA">
          <front>
            <title>SIGMA: The 'SIGn-and-MA' approach to authenticated Diffie-Hellman and its use in the IKE protocols</title>
            <seriesInfo name="Annual International Cryptology Conference, Springer, pp. 400-425" value=""/>
            <author initials="H." surname="Krawczyk">
              <organization/>
            </author>
            <date year="2003"/>
          </front>
        </reference>
        <reference anchor="WEBRTC">
          <front>
            <title>WebRTC 1.0: Real-time Communication Between Browsers</title>
            <seriesInfo name="W3C Editor's Draft" value=""/>
            <author initials="A." surname="Bergkvist">
              <organization/>
            </author>
            <author initials="D." surname="Burnett">
              <organization/>
            </author>
            <author initials="A." surname="Narayanan">
              <organization/>
            </author>
            <author initials="C." surname="Jennings">
              <organization/>
            </author>
            <author initials="B." surname="Aboba">
              <organization/>
            </author>
            <author initials="T." surname="Brandstetter">
              <organization/>
            </author>
            <author initials="J." surname="Bruaroey">
              <organization/>
            </author>
            <date year="2018" month="November" day="08"/>
          </front>
        </reference>
        <xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3725.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6189.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7696.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8445.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.3550.xml"/><xi:include href="https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.5761.xml"/></references>
    </references>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>This problem would not have been discovered if it weren't for discussions with
Sam Scott, Hugo Krawczyk, and Richard Barnes.  A solution similar to the one
presented here was first proposed by Karthik Bhargavan who provided valuable
input on this document.  Thyla van der Merwe assisted with a formal model of the
solution.  Adam Roach and Paul E. Jones provided significant review and input.</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAL0GTl0AA6192XLcSLbYe34FrvQg0lNVFqml1epR96UoasRuLbRIuT12
OJpgIUniEgXURaJIVfNqYv7BL/bvzZf4rLkAKEruMUMRIquAxMmTZ98wnU5N
V3aVfZ7d+1Rf1c1Nnf1i19nxZd7abK/r8vmVy5o6WzkL/59nJ2+Ps5uyu8y6
S5sdW+dK+PKVdfO2XHb4+1HbdM28qbKt41dH2/dMfnbW2mtYHv7MPv1yfM8U
zbzOF/DEos3Pu2lpu/PpYrFy5XzqiuV0deWmD78z87yzF027fp65rjDlsn2e
de3KdbsPH37/cNeslgVc4J5nz3Z2d41xXV4Xv+VVU8O6a+vMsnye/Q8AZJK5
pu1ae+7gt/UCf/mfxuSr7rJpn5tsajL4KWtY6N0sO7lsFq6p6TMG8V3edmWd
fNG0F/B583tZVTl9YBd5WT3PFt2/Vs2Nrbu2Wa5nte2S1Q9m2UfAUtPKTbz8
QVvO0883rW6v2n9tz7vFbN4sjKmbdpF35bV9bkxZn4e/MkTxc7px5Fing2Ol
U+xyPLlp10zlVzi7k+Ntf5T3aD2PM/qZ8raOZ9nLKr+y01/LShHkv9ybZe9s
bX+H48BP8cCeZzvff/89/elsW1qH0D/P3tp5twLI3jdwpnBztt8slqvOttnx
vLT13GY7T54+nGTHy7asL2w7yZbLGXz2+B9//1873z00sODx4V/e7aU754/g
8Gz2j7//b/irngKVTN/tzf/x9/+TL5dtk8+BkBvaGhxciTRXZK/K8/PSTt/Y
qlrkdQa3ZGXnkAMQMsTY4S8H2VKQ4+7AzptZ9kub38x/X19FGAAKfjTAwF5d
r/IqO6xh0zUdAvy1366XXVM1F2tASH1uW0RFHwuPHz6cPt59gjj49eDlx5P9
FAm/2jP4LNuZPXwOlJZX065cWMTvYlXjhvG4X9ruxlr4v21uAKi7tgRn+tK2
F1fXpevSb17BN6sW6L4b3PE+b/N1Xuc9+tifZT/buoa9uPSLl7Ns76w5y9NP
T+ABLZyG6+AZtk2//Bm/XOVtY9cJqneeTXd2pg+fDRD+66P97KAou6Z94LJX
KImMMdPpNMvPXNfmc/jz5LJ0GUir1QKIIytIyJ0Bfa6Eo66AoxxxVJ5yFJIK
yMpXeZdftPnCnADYbglyKHubr5Go7XzVlt06A84VQTpH8qfzOcHzCXcoE5qt
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
AA==

-->
</rfc>
